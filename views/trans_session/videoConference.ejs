<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0">
    <title>Video Conference</title>
    <link rel="stylesheet" href="https://d1x2efl61akomv.cloudfront.net/styles/main.5e44cee8.css">
    <link href="/../css/appear2.css" rel="stylesheet">
    <link href="/../css/getMediaElement.css" rel="stylesheet">
    <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8/jquery.min.js"></script>
    <script src="/../js/RTCMultiConnection.min.js"></script>
    <script src="/../js/socket.io.js"></script>

    <!-- custom layout for HTML5 audio/video elements -->
    <script src="/../js/getMediaElement.js"></script>
</head>

<script>
    $(document).ready(function () {
        disableInputButtons();
        connection.openOrJoin(document.getElementById('room-id').value, function (isRoomExists, roomid) {
            if (!isRoomExists) {
                //  showRoomURL(roomid);
            }
        });
    });

    var connection = new RTCMultiConnection();

    // by default, socket.io server is assumed to be deployed on your own URL
    //  connection.socketURL = '/';

    // comment-out below line if you do not have your own socket.io server
    connection.socketURL = 'https://rtcmulticonnection.herokuapp.com:443/';

    connection.socketMessageEvent = 'video-conference-demo';

    connection.session = {
        audio: true,
        video: true
    };

    connection.sdpConstraints.mandatory = {
        OfferToReceiveAudio: true,
        OfferToReceiveVideo: true
    };

    connection.videosContainer = document.getElementById('video-wrapper');
    connection.onstream = function (event) {
        //   var width = parseInt(connection.videosContainer.clientWidth / 2) - 20;
        var mediaElement = getMediaElement(event.mediaElement, {
            title: event.userid,
            //    buttons: ['full-screen'],
            //    width: width,
            showOnMouseEnter: false
        });
        addNewVideoBox(event.userid, mediaElement);
        //    connection.videosContainer.appendChild(mediaElement);

        setTimeout(function () {
  //          mediaElement.media.play();
        }, 5000);

        mediaElement.id = event.streamid;
    };

    connection.onstreamended = function (event) {
        var mediaElement = document.getElementById(event.streamid);
        if (mediaElement) {
            // mediaElement.parentNode.removeChild(mediaElement);
            removeVideoBox(event.userid);
        }
    };

    function disableInputButtons() {
        document.getElementById('room-id').disabled = true;
    }

    /*
     function showRoomURL(roomid) {
     var roomHashURL = '#' + roomid;
     var roomQueryStringURL = '?roomid=' + roomid;

     var html = '<h2>Unique URL for your room:</h2><br>';

     html += 'Hash URL: <a href="' + roomHashURL + '" target="_blank">' + roomHashURL + '</a>';
     html += '<br>';
     html += 'QueryString URL: <a href="' + roomQueryStringURL + '" target="_blank">' + roomQueryStringURL + '</a>';

     var roomURLsDiv = document.getElementById('room-urls');
     roomURLsDiv.innerHTML = html;

     roomURLsDiv.style.display = 'block';
     }
     */
    (function () {
        var params = {},
                r = /([^&=]+)=?([^&]*)/g;

        function d(s) {
            return decodeURIComponent(s.replace(/\+/g, ' '));
        }

        var match, search = window.location.search;
        while (match = r.exec(search.substring(1)))
            params[d(match[1])] = d(match[2]);
        window.params = params;
    })();

    var roomid = '';
    if (localStorage.getItem(connection.socketMessageEvent)) {
        roomid = localStorage.getItem(connection.socketMessageEvent);
    } else {
        roomid = connection.token();
    }
 /*   document.getElementById('room-id').value = roomid;
    document.getElementById('room-id').onkeyup = function () {
        localStorage.setItem(connection.socketMessageEvent, this.value);
    };
 */

    var hashString = location.hash.replace('#', '');
    if (hashString.length && hashString.indexOf('comment-') == 0) {
        hashString = '';
    }

    var roomid = params.roomid;
    if (!roomid && hashString.length) {
        roomid = hashString;
    }

    if (roomid && roomid.length) {
        document.getElementById('room-id').value = roomid;
        localStorage.setItem(connection.socketMessageEvent, roomid);

        // auto-join-room
        (function reCheckRoomPresence() {
            connection.checkPresence(roomid, function (isRoomExists) {
                if (isRoomExists) {
                    connection.join(roomid);
                    return;
                }

                setTimeout(reCheckRoomPresence, 5000);
            });
        })();

        disableInputButtons();
    }

    function addNewVideoBox(userId, video) {
        var divHtml = $("#video-wrapper").html() +
                "<div class=\"video-frame-wrapper splitscreen-wrapper ui-draggable ui-droppable _1\" id=\"videoFrame_" + userId + "\" >" +
//                "<span>"+this.userToken+"</span>"+
                "<div class=\"video-box\"> " +
                "<div class=\"video-frame\" > " +
                "<div class=\"video-stream-container\" id=\"myVideoContainer_" + userId + "\" >" +
                "</div></div></div>" +
                "</div>";

        $("#video-wrapper").html(divHtml);

        var videosContainer = document.getElementById('myVideoContainer_' + userId) || document.body;
        videosContainer.insertBefore(video, videosContainer.firstChild);
        setUpVideoBoxesCss();
    }

    function removeVideoBox(userId) {
        var videoFrame = document.getElementById('videoFrame_' + userId);
        if (videoFrame) videoFrame.parentNode.removeChild(videoFrame);
        setUpVideoBoxesCss();
    }

    function setUpVideoBoxesCss() {
        var i = 0;
        $("#video-wrapper > div").each(function () {
            i++;
            var lastClass = $(this).attr("class").split(" ").pop();
            $(this).removeClass(lastClass);
            $(this).addClass('_' + i);
        });

        if (i > 1) {
            $("#video-wrapper").attr("class", "div" + i);
        }
    }


</script>

<footer>
    <small id="send-message"></small>
</footer>

<script src="https://cdn.webrtc-experiment.com/common.js"></script>


</head>
<body>

<main class="video-space" ng-class="{alone: getNumberOfConnectedClients() == 1 }" ng-style="backgroundStyle">
    <header class="video-space-header screen-element">
        <div class="content-wrapper">
            <div ng-click="toggleRoomActivity()" ng-class="{'selected': roomActivityService.isOpen}"
                 class="top-bar-button roomactivity">
                <i class="icon" ng-include="'/images/tools/oval-grid.e47553a0.svg'">
                    <svg width="18px" height="18px" viewBox="0 0 18 18" version="1.1" xmlns="http://www.w3.org/2000/svg"
                    >
                        <title>room-icon</title>
                        <desc>Created with Sketch.</desc>
                        <defs></defs>
                        <g id="Page-1-Copy-4" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                            <g id="room-presence-b1---expanded-copy-3" transform="translate(-28.000000, -23.000000)"
                               fill="#FFFFFF">
                                <g id="room-icon" transform="translate(28.000000, 23.000000)">
                                    <g id="rooms-icon">
                                        <circle id="Oval-153" cx="2" cy="2" r="2"></circle>
                                        <circle id="Oval-153-Copy-3" cx="2" cy="9" r="2"></circle>
                                        <circle id="Oval-153-Copy-6" cx="2" cy="16" r="2"></circle>
                                        <circle id="Oval-153-Copy" cx="9" cy="2" r="2"></circle>
                                        <circle id="Oval-153-Copy-4" cx="9" cy="9" r="2"></circle>
                                        <circle id="Oval-153-Copy-2" cx="16" cy="2" r="2"></circle>
                                        <circle id="Oval-153-Copy-5" cx="16" cy="9" r="2"></circle>
                                        <circle id="Oval-153-Copy-8" cx="16" cy="16" r="2"></circle>
                                        <circle id="Oval-153-Copy-7" cx="9" cy="16" r="2"></circle>
                                    </g>
                                </g>
                            </g>
                        </g>
                    </svg>
                </i>
            </div>
            <div class="logo-wrapper ng-hide" ng-show="RoomState.logoUrl">
                <img class="custom-logo ng-hide" ng-show="RoomState.logoUrl">
            </div>
            <div class="room-url-wrapper" analytics-event="copyUrlAnalyticsEvent">
                <div class="room-url">
                    <p id="room-id">Room Id: <%= roomId %></p>
                </div>
            </div>
            <div class="room-control-buttons control-button-group">
                <div ng-click="openMediaSelectorModal()" class="top-bar-button contacts-button" title="Cam/Mic">
                    <i class="icon contacts" ng-include="'/images/tools/camera.cc998da0.svg'">
                        <svg width="18px" height="10px" viewBox="0 0 18 10" version="1.1"
                             xmlns="http://www.w3.org/2000/svg">
                            <defs></defs>
                            <g id="fb-messenger-invite" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                <g id="web---fb-messenger-invite" transform="translate(-480.000000, -28.000000)"
                                   fill="#FFFFFF">
                                    <g id="room" transform="translate(-1.000000, 0.000000)">
                                        <g id="top-bar-icons" transform="translate(472.000000, 14.000000)">
                                            <g id="cam-/-mic">
                                                <g id="cam-/-mic-icon-icon">
                                                    <path d="M9,14.9953976 C9,14.4456547 9.44748943,14 9.99850233,14 L21.0014977,14 C21.5529553,14 22,14.4556644 22,14.9953976 L22,23.0046024 C22,23.5543453 21.5525106,24 21.0014977,24 L9.99850233,24 C9.44704472,24 9,23.5443356 9,23.0046024 L9,14.9953976 Z M23,17 L26,14 L27,14 L27,24 L26,24 L23,21 L23,17 Z"
                                                          id="camera"></path>
                                                </g>
                                            </g>
                                        </g>
                                    </g>
                                </g>
                            </g>
                        </svg>
                    </i>video-
                    <span class="desc">
                    <span>Cam/Mic</span>
                </span>
                </div>


            </div>

            <div ng-hide="RoomState.isClaimed" class="user-control-buttons control-button-group">
                <div class="flex-button-wrapper">
                    <button id="connect" class="ui-button topbar-signup-button jstest-claim-button topbar-small-button">
                        Connect
                    </button>
                </div>
            </div>

        </div>
    </header>


    <div class="video-wrapper screen-element">
        <div style="/* height: 100%; *//* width: 100%; */" class="div2" id="video-wrapper">
        </div>
    </div>
    <div class="bottom-right-button-group screen-element">
        <a class="ui-text-button white" ng-click="clickedHelpButton()">Help</a>
        <a class="ui-text-button white" ng-click="openPopupForType('tos')">Terms of use</a>
    </div>

    <div ng-show="ChatService.isEnabled" class="action-button chat-open-button visible" ng-click="openChat()"
         ng-class="{active: ChatService.unreadCount > 0, visible: !ChatService.isOpen, 'pushed-up': isPushedUp()}">
        <i class="svg bordered" ng-include="'/images/tools/chat-button.2c5ae55e.svg'">
            <svg width="50px" height="50px" viewBox="0 0 50 50" version="1.1" xmlns="http://www.w3.org/2000/svg"
                 xmlns:sketch="http://www.bohemiancoding.com/sketch/ns">
                <g id="Page-1-Copy-Copy-Copy-Copy-Copy-Copy-Copy" stroke="none" stroke-width="1" fill="none"
                   fill-rule="evenodd" sketch:type="MSPage">
                    <g id="chat-notifications" sketch:type="MSArtboardGroup"
                       transform="translate(-951.000000, -671.000000)" fill="#FFFFFF">
                        <g id="chat-button" sketch:type="MSLayerGroup" transform="translate(951.000000, 671.000000)">
                            <path d="M33.4510276,17 L15.5487859,17 C14.696991,17 14,17.6744168 14,18.498479 L14,30.0445536 C14,30.8687999 14.696991,31.5430326 15.5487859,31.5430326 L20.7742597,31.5430326 L28.2233156,36 L28.2233156,31.5430326 L33.4510276,31.5430326 C34.3028225,31.5430326 35,30.8687999 35,30.0445536 L35,18.498479 C35,17.6744168 34.3028225,17 33.4510276,17"
                                  id="Fill-15" sketch:type="MSShapeGroup"></path>
                        </g>
                    </g>
                </g>
            </svg>
        </i>
    </div>
</main>


</body>
</html>
